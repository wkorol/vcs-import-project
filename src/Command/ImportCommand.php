<?php

declare(strict_types=1);

namespace App\Command;

use App\Message\ImportCommandCreator;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\Messenger\MessageBusInterface;

class ImportCommand extends Command
{
    protected static $defaultName = 'import:repository';

    private $providers;
    private $importCommandCreator;
    private $bus;

    public function __construct(MessageBusInterface $bus, ImportCommandCreator $importCommandCreator, ParameterBagInterface $params)
    {
        $this->importCommandCreator = $importCommandCreator;
        $this->bus = $bus;

        $this->providers = $params->get('providers');

        parent::__construct();
    }

    public function checkProviderExistance($providerName): bool
    {
        if (in_array(strtolower($providerName), $this->providers)) {
            return true;
        }
        return false;
    }

    protected function configure()
    {
        $this->addArgument('org', InputArgument::REQUIRED, 'Organisation Name');
        $this->addArgument('provider', InputArgument::REQUIRED, 'Provider Name');

        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        try {
            $importCommand = $this->importCommandCreator->create(
                $input->getArgument('org'),
                $input->getArgument('provider')
            );

        } catch (ProviderNotFound $exception) {
            $output->writeln($exception->getMessage());
            return Command::FAILURE; 
        }
        $this->bus->dispatch($importCommand);

        return COMMAND::SUCCESS;
    }
}