<?php
namespace App\Command;

use App\Message\ImportCommandCreator;
use App\Repository\OrgRepository;
use App\Repository\RepoRepository;
use App\Services\BitbucketService;
use App\Services\GithubService;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\Messenger\MessageBusInterface;

class ImportCommand extends Command
{
    protected static $defaultName = 'import:repository';

    private $repoRepository;
    private $providers;
    private $importCommandCreator;
    private $bus;

    public function __construct(MessageBusInterface $bus, ImportCommandCreator $importCommandCreator, RepoRepository $repoRepository, ParameterBagInterface $params)
    {
        $this->importCommandCreator = $importCommandCreator;
        $this->bus = $bus;
        $this->params = $params;
        $this->repoRepository = $repoRepository;


        $this->providers = $params->get('providers');

        parent::__construct();
    }

    public function checkProviderExistance($providerName): bool
    {
        if (in_array(strtolower($providerName), $this->providers)) {
            return true;
        }
        return false;
    }

    protected function configure()
    {
        $this->addArgument('username', InputArgument::REQUIRED, 'Organisation Name');
        $this->addArgument('provider', InputArgument::REQUIRED, 'Provider Name');

        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {

        $orgName = $input->getArgument('username');
        $provider = $input->getArgument('provider');


        //$this->githubService->importToDb($orgName);

        //$this->bitbucketService->importToDb($orgName);

        $importCommand = $this->importCommandCreator->create($input->getArgument('username'), $input->getArgument('provider'));
        $this->bus->dispatch($importCommand);

        return COMMAND::SUCCESS;
    }
}